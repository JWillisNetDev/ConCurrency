@using ConCurrency.Data.Dtos.Customers
@using ConCurrency.Site.Components.Customers
@using ConCurrency.Site.HttpClients.Customers
@page "/customers"
@rendermode InteractiveServer
@inject ICustomersClient CustomersClient
@inject IDialogService Dialog

<MudSnackbarProvider />
<MudDialogProvider />

<MudText Typo="Typo.h3">Customers</MudText>

<MudContainer MaxWidth="MaxWidth.Large">
    @if (_Customers is not null)
    {
        <MudTable Items="@_Customers">
            <HeaderContent>
                <MudTh>Customer Id</MudTh>
                <MudTh>Name</MudTh>
				<MudTh>
					<MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="@(async _ => await ShowCreateCustomerDialog())" />
				</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@(context.CustomerId)</MudTd>
                <MudTd>@(context.Name)</MudTd>
				<MudTd>
					<MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" OnClick="@(async _ => await ShowEditCustomerDialog(@context))" />
					<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(async _ => await ShowDeleteCustomerDialog(@context))" />
				</MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudContainer Fixed="true" Class="d-flex justify-center align-center">
            <MudProgressCircular Class="d-flex justify-center align-center" Indeterminate="true" />
        </MudContainer>
    }
</MudContainer>

@code
{
	List<CustomerDto>? _Customers;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			await RefreshCustomers();
		}
	}

	private async Task RefreshCustomers()
	{
		_Customers = await CustomersClient.GetCustomersAsync();
		StateHasChanged();
	}

	private async Task ShowCreateCustomerDialog()
	{
		var parameters = new DialogParameters<CreateCustomerDialog>();

		var options = new DialogOptions { CloseButton = true, FullWidth = true, };

		var dialog = await Dialog.ShowAsync<CreateCustomerDialog>("Create", parameters, options);
		var result = await dialog.Result;
		if (!result.Canceled && result.Data is not null)
		{
			await RefreshCustomers();
		}
	}

	private async Task ShowDeleteCustomerDialog(CustomerDto customer)
	{
		var parameters = new DialogParameters<DeleteCustomerDialog>();
		parameters.Add(x => x.Customer, customer);

		var options = new DialogOptions { CloseButton = true, FullWidth = true };

		var dialog = await Dialog.ShowAsync<DeleteCustomerDialog>("Delete", parameters, options);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			await RefreshCustomers();
		}
	}

	private async Task ShowEditCustomerDialog(CustomerDto customer)
	{
		var parameters = new DialogParameters<EditCustomerDialog>();
		parameters.Add(x => x.Customer, customer);

		var options = new DialogOptions { CloseButton = true, FullWidth = true, };

		var dialog = await Dialog.ShowAsync<EditCustomerDialog>("Edit", parameters, options);
		var result = await dialog.Result;
		if (!result.Canceled)
		{
			await RefreshCustomers();
		}
	}
}
