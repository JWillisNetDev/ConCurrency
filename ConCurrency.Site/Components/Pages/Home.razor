@using ConCurrency.Data.Dtos.Products
@using ConCurrency.Site.HttpClients
@page "/"
@rendermode InteractiveServer
@inject IExchangeServiceClient ExchangeService
@inject IProductsServiceClient ProductService

<MudPopoverProvider />

<PageTitle>Products</PageTitle>

<MudGrid>
	<MudItem xs="12" sm="6" md="4" lg="3">
		<MudAutocomplete T="string"
						 Label="Currency"
						 Immediate="true"
						 CoerceValue="false"
						 ResetValueOnEmptyText="true"
						 @bind-Value="_SelectedCurrency"
						 SearchFunc="@GetSymbols"
						 TransformOrigin="Origin.TopCenter"
						 AnchorOrigin="Origin.TopCenter" />

	</MudItem>
	<MudItem xs="12" sm="6" md="4" lg="3">
		<MudButton StartIcon="@Icons.Material.Filled.Refresh" Color="@Color.Primary" Variant="Variant.Filled" OnClick="RefreshProductsAsync">
			Refresh Products
		</MudButton>
	</MudItem>
	<MudItem xs="12">
		@if (_Products is not null)
		{
			<MudTable Items="_Products">
				<HeaderContent>
					<MudTh>Product Name</MudTh>
					<MudTh>Price</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>@(context.Name)</MudTd>
					<MudTd>@(string.Format("{0:#.00}", context.Price * _ConversionRate))</MudTd>
				</RowTemplate>
			</MudTable>
		}
		else
		{
			<MudContainer Fixed="true" Class="d-flex justify-center align-center">
				<MudProgressCircular Class="d-flex justify-center align-center" Indeterminate="true" />
			</MudContainer>
		}
	</MudItem>
</MudGrid>

@code
{
	private List<ProductDto>? _Products;
	private string _SelectedCurrency = "USD";
	private double _ConversionRate = 1.0;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			_Products = await ProductService.GetProductsAsync();
			StateHasChanged();
		}
	}

	private async Task<IEnumerable<string>> GetSymbols(string input)
	{
		var symbols = await ExchangeService.GetSymbolsAsync();

		if (string.IsNullOrEmpty(input))
		{
			return symbols.Select(x => x.Key);
		}

		return symbols
			.Where(x => x.Key.Contains(input, StringComparison.InvariantCultureIgnoreCase) || x.Value.Contains(input, StringComparison.InvariantCultureIgnoreCase))
			.Select(x => x.Key);
	}

	private async Task RefreshProductsAsync()
	{
		if (string.IsNullOrWhiteSpace(_SelectedCurrency))
		{
			return;
		}

		_Products = await ProductService.GetProductsAsync();
		var conversionRates = await ExchangeService.GetExchangeRatesAsync("USD", [_SelectedCurrency]);
		_ConversionRate = conversionRates[_SelectedCurrency];
		StateHasChanged();
	}
}