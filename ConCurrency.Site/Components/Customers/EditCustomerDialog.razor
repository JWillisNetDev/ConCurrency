@using ConCurrency.Data.Dtos.Customers
@using System.ComponentModel.DataAnnotations
@using ConCurrency.Data.Validators
@using ConCurrency.Site.HttpClients.Customers

@rendermode InteractiveServer

@inject ICustomersClient CustomersClient

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Person" />
            Edit Customer
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_Form" Model="@_EditModel" Validation="@(() => _Validator.ValidateValue)" ValidationDelay="500">
            <MudTextField @bind-Value="_EditModel.Name"
                          Label="Name"
						  For="@(() => _EditModel.Name)"
						  Immediate="true"
						  Placeholder="@(Customer.Name)" />	
        </MudForm>
    </DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnSave">
			Save
		</MudButton>
		<MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => Dialog.Cancel())">
			Cancel
		</MudButton>
	</DialogActions>
</MudDialog>

@code
{

	[Parameter]
	public CustomerDto Customer { get; set; }


	[CascadingParameter]
	private MudDialogInstance Dialog { get; set; } = null!;

	private MudForm _Form = null!;
	private UpdateCustomerDto _EditModel { get; set; } = new();
	private UpdateCustomerDtoValidator _Validator = new();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			_EditModel = new()
			{
				Name = Customer?.Name,
			};
		}
	}

	private async Task OnSave()
	{
		await _Form.Validate();

		if (_Form.IsValid)
		{
			await CustomersClient.UpdateCustomerAsync(Customer.CustomerId!, _EditModel);
			StateHasChanged();
			Dialog.Close(DialogResult.Ok(_EditModel));
		}
	}
}
