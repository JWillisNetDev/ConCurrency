@using ConCurrency.Data.Dtos.Customers
@using System.ComponentModel.DataAnnotations
@using ConCurrency.Data.Validators
@using ConCurrency.Site.HttpClients.Customers

@rendermode InteractiveServer

@inject ICustomersClient CustomersClient

<MudDialog>
	<TitleContent>
		<MudText Typo="Typo.h6">
			<MudIcon Icon="@Icons.Material.Filled.PersonAdd" />
			Create Customer
		</MudText>
	</TitleContent>
	<DialogContent>
		<MudForm @ref="_Form" Model="@_Model" Validation="@(() => _Validator.ValidateValue)" ValidationDelay="500">
			<MudTextField @bind-Value="_Model.Name"
						  Label="Name"
						  For="@(() => _Model.Name)"
						  Immediate="true" />
		</MudForm>
	</DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnCreate">
			Create
		</MudButton>
		<MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => Dialog.Cancel())">
			Cancel
		</MudButton>
	</DialogActions>
</MudDialog>

@code
{
	[CascadingParameter]
	private MudDialogInstance Dialog { get; set; } = null!;

	private MudForm _Form = null!;
	private CreateCustomerDto _Model { get; set; } = new();
	private CreateCustomerDtoValidator _Validator = new();

	private async Task OnCreate()
	{
		await _Form.Validate();

		if (_Form.IsValid)
		{
			var created = await CustomersClient.CreateCustomerAsync(_Model);
			StateHasChanged();
			Dialog.Close(DialogResult.Ok(created));
		}
	}
}
